import build.wallet.money.currency.code.IsoCurrencyTextCode;
import build.wallet.partnerships.PartnerId;
import build.wallet.partnerships.PartnershipTransactionId;
import build.wallet.partnerships.PartnershipTransactionStatus;
import build.wallet.partnerships.PartnershipTransactionType;
import kotlinx.datetime.Instant;

-- Table for storing the status of the partnership transaction locally.
-- This is used to keep track of incoming partnership transactions before
-- they are available in the wallet transaction history.
CREATE TABLE partnershipTransactionEntity (
    transactionId TEXT AS PartnershipTransactionId NOT NULL PRIMARY KEY,
    type TEXT AS PartnershipTransactionType NOT NULL,
    status TEXT AS PartnershipTransactionStatus,
    context TEXT,
    partnerLogoUrl TEXT,
    partnerName TEXT NOT NULL,
    partnerId TEXT AS PartnerId NOT NULL,
    cryptoAmount REAL,
    txid TEXT,
    fiatAmount REAL,
    fiatCurrency TEXT AS IsoCurrencyTextCode,
    paymentMethod TEXT,
    created TEXT AS Instant NOT NULL,
    updated TEXT AS Instant NOT NULL,
    sellWalletAddress TEXT,
    partnerTransactionUrl TEXT,
    partnerLogoBadgedUrl TEXT
);

saveEntity:
INSERT OR REPLACE INTO partnershipTransactionEntity VALUES ?;

getAll:
SELECT * FROM partnershipTransactionEntity;

getById:
SELECT * FROM partnershipTransactionEntity WHERE transactionId = ?;

getMostRecentTransactionByPartnerId:
SELECT * FROM partnershipTransactionEntity WHERE partnerId = ? ORDER BY created DESC LIMIT 1;

getPreviouslyUsedPartnerIds:
SELECT DISTINCT partnerId FROM partnershipTransactionEntity WHERE status NOT NULL ORDER BY created DESC;

delete:
DELETE FROM partnershipTransactionEntity WHERE transactionId = ?;

clear:
DELETE FROM partnershipTransactionEntity;
