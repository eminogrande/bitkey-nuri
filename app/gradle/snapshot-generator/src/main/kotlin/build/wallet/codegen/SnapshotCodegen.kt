package build.wallet.codegen

import bitkey.ui.Snapshots
import com.squareup.kotlinpoet.*
import io.outfoxx.swiftpoet.DeclaredTypeName
import io.outfoxx.swiftpoet.CodeBlock as SwiftCodeBlock
import io.outfoxx.swiftpoet.FileSpec as SwiftFileSpec
import io.outfoxx.swiftpoet.FunctionSpec as SwiftFunctionSpec
import io.outfoxx.swiftpoet.TypeSpec as SwiftTypeSpec

private const val GENERATED_FILE_WARNING_COMMENT =
  "DO NOT EDIT: This file was generated by `gradle:snapshot-generator`!"

private val FUN_SPEC = ClassName("io.kotest.core.spec.style", "FunSpec")
private val PAPARAZZI_EXTENSION = MemberName("build.wallet.kotest.paparazzi", "paparazziExtension")
private val PREVIEW_THEME = MemberName("build.wallet.ui.tooling", "PreviewWalletTheme")
private val THEME = ClassName("build.wallet.ui.theme", "Theme")
private val UIKIT_VC = ClassName("platform.UIKit", "UIViewController")
private val COMPOSE_VC = ClassName("androidx.compose.ui.window", "ComposeUIViewController")
private val RENDER_EXTENSION = MemberName("build.wallet.ui.model", "render")

private val DISABLE_CODE_ANALYSIS =
  AnnotationSpec.builder(Suppress::class)
    .addMember("%S", "ktlint")
    .addMember("%S", "detekt:all")
    .build()

private val themes = listOf("light", "dark")

/**
 * Generates snapshot test Kotlin and Swift source files using the provided model data.
 */
class SnapshotCodegen(
  private val outputs: OutputDirectory,
) {
  private val iosKotlinApiFileBuilder = FileSpec.builder("build.wallet", "GeneratedSnapshots")
    .addAnnotation(DISABLE_CODE_ANALYSIS)
    .addFileComment(GENERATED_FILE_WARNING_COMMENT)

  private val swiftTestCases = mutableMapOf<SwiftFileSpec, List<SnapshotModelTestData>>()

  fun generateTestCase(
    modelClassName: String,
    modelData: List<SnapshotModelTestData>,
  ) {
    val testCaseName = "${modelClassName.substringBeforeLast("Model")}Snapshots"
    generateKotlinTestCase(testCaseName, modelData)
    generateSwiftTestCase(testCaseName, modelData)
  }

  private fun generateKotlinTestCase(
    testCaseName: String,
    modelData: List<SnapshotModelTestData>,
  ) {
    val generatedClass = generateFunSpecClass(modelData)

    val file = FileSpec.builder(ClassName("snapshot", testCaseName))
      .addAnnotation(DISABLE_CODE_ANALYSIS)
      .addFileComment(GENERATED_FILE_WARNING_COMMENT)
      .addType(generatedClass)
      .build()
    file.writeTo(outputs.kotlinTests)
  }

  private fun generateSwiftTestCase(
    testCaseName: String,
    modelData: List<SnapshotModelTestData>,
  ) {
    val data = modelData.first()
    val composableName = data.composable.simpleName.asString()
    val baseViewControllerName = "create${composableName}UIViewController"

    // Add required Compose UIViewController factory functions to a single file
    iosKotlinApiFileBuilder.apply {
      // Add Composable function import if the model is not ComposeModel
      if (composableName != "render") {
        addImport(data.composable.packageName.asString(), composableName)
      }
      addComposeViewControllerFunctions(modelData, baseViewControllerName)
    }

    val file = SwiftFileSpec.builder(testCaseName)
      .addComment(GENERATED_FILE_WARNING_COMMENT)
      .addImport("Shared")
      .addImport("SnapshotTesting")
      .addType(
        SwiftTypeSpec.classBuilder(testCaseName)
          .addSuperType(DeclaredTypeName.typeName("XCTest.XCTestCase"))
          .addFunctions(
            modelData.map { modelData ->
              modelData.toSwiftTestcaseFunction(baseViewControllerName)
            }
          )
          .build()
      )
      .build()

    swiftTestCases[file] = modelData
  }

  /**
   * Generate a Kotest FunSpec test with the paparazzi extension.
   *
   * ```
   * public class SpendingLimitCardModel : FunSpec({
   *   val paparazzi = paparazziExtension(newStoragePath = true)
   *
   *   test("testModel") {
   *     paparazzi.snapshot {
   *       SpendingLimitCard(model = Snapshots.testModel)
   *     }
   *   }
   * })
   * ```
   */
  private fun generateFunSpecClass(modelData: List<SnapshotModelTestData>): TypeSpec {
    val modelTypeName = modelData.first().modelType.declaration.simpleName.asString()
    return TypeSpec.classBuilder(ClassName("snapshot", modelTypeName))
      .superclass(FUN_SPEC)
      .addSuperclassConstructorParameter(
        CodeBlock.builder()
          .add("{\n")
          .withIndent {
            addStatement("val paparazzi = %M(newStoragePath = true)\n", PAPARAZZI_EXTENSION)
            modelData.forEach { data ->
              val propertyMemberName = data.modelProperty.let {
                MemberName(it.packageName.asString(), it.simpleName.asString())
              }
              val composableMemberName = data.composable.let {
                MemberName(it.packageName.asString(), it.simpleName.asString())
              }
              add("test(%S) {\n", propertyMemberName.simpleName)
              withIndent {
                add("paparazzi.snapshot() {\n")
                addComposableCall(composableMemberName, propertyMemberName)
                add("}\n")
              }
              add("}\n")
            }
          }
          .add("\n}")
          .build()
      )
      .build()
  }

  /**
   * Generate Kotlin functions to produce `ComposeUIViewController`s
   * for each test model in light and dark themes.
   *
   * ```
   * public fun createSpendingLimitCardUIViewController_testModel_light(): UIViewController {
   *   return ComposeUIViewController {
   *     PreviewWalletTheme {
   *       SpendingLimitCard(model = testModel)
   *     }
   *   }
   * }
   *
   * public fun createSpendingLimitCardUIViewController_testModel_dark(): UIViewController {
   *   return ComposeUIViewController {
   *     PreviewWalletTheme {
   *       SpendingLimitCard(model = testModel)
   *     }
   *   }
   * }
   * ```
   */
  private fun FileSpec.Builder.addComposeViewControllerFunctions(
    modelData: List<SnapshotModelTestData>,
    baseViewControllerName: String,
  ) {
    val viewControllerFunctions = modelData.flatMap { data ->
      val propertyName = data.modelProperty.simpleName.asString()
      val propertyMemberName =
        MemberName(data.modelProperty.packageName.asString(), propertyName)
      val composableMemberName =
        MemberName(
          data.composable.packageName.asString(),
          data.composable.simpleName.asString()
        )
      themes.map { theme ->
        FunSpec.builder("${baseViewControllerName}_${propertyName}_$theme")
          .returns(UIKIT_VC)
          .addCode(
            CodeBlock.builder()
              .add("return %T {\n", COMPOSE_VC)
              .withIndent {
                add("%M(theme = %T.%L) {\n", PREVIEW_THEME, THEME, theme.uppercase())
                addComposableCall(composableMemberName, propertyMemberName)
                add("}\n")
              }
              .add("}\n")
              .build()
          )
          .build()
      }
    }
    addFunctions(viewControllerFunctions)
  }

  private fun CodeBlock.Builder.addComposableCall(
    composableMemberName: MemberName,
    propertyMemberName: MemberName,
  ) {
    withIndent {
      if (composableMemberName.simpleName == "render") {
        add("%T.%M.%M()\n", Snapshots::class, propertyMemberName, RENDER_EXTENSION)
      } else {
        add(
          "%M(model = %T.%M)\n",
          composableMemberName,
          Snapshots::class,
          propertyMemberName
        )
      }
    }
  }

  /**
   * Generate a test case and assertions for an XCTest.
   *
   * ```
   * func test_testModel() {
   *   assertBitkeySnapshots(
   *     viewController: {
   *       GeneratedSnapshotsKt.createSpendingLimitCardUIViewController_testModel_light()
   *     },
   *     fileName: "snapshot_SpendingLimitCardModel_testModel_light"
   *   )
   *   assertBitkeySnapshots(
   *     viewController: {
   *       GeneratedSnapshotsKt.createSpendingLimitCardUIViewController_testModel_dark()
   *     },
   *     fileName: "snapshot_SpendingLimitCardModel_testModel_dark"
   *   )
   * }
   * ```
   */
  private fun SnapshotModelTestData.toSwiftTestcaseFunction(
    createViewControllerName: String,
  ): SwiftFunctionSpec {
    val modelName = modelType.declaration.simpleName.asString()
    val modelPropertyName = modelProperty.simpleName.asString()
    val builder = SwiftFunctionSpec.builder("test_$modelPropertyName")
    themes.forEach { theme ->
      val fileName = "snapshot_${modelName}_${modelPropertyName}_$theme"
      val assertion = SwiftCodeBlock.builder()
        .add("assertBitkeySnapshots(\n")
        .indent()
        .add(
          "viewController: { %L.%L_%L() },\n",
          "GeneratedSnapshotsKt",
          createViewControllerName,
          "${modelPropertyName}_$theme"
        )
        .add("fileName: %S\n", fileName)
        .unindent()
        .add(")\n")
        .build()

      builder.addCode(assertion)
    }
    return builder.build()
  }

  fun writeFiles() {
    iosKotlinApiFileBuilder
      .build()
      .writeTo(outputs.kotlinIos)

    swiftTestCases.forEach { (swiftTest, _) ->
      swiftTest.writeTo(outputs.swiftTests)
    }
  }
}
