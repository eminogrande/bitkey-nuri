package build.wallet.gradle.logic.gradle

import org.gradle.api.Project
import org.gradle.api.artifacts.Dependency
import org.gradle.api.artifacts.MinimalExternalModuleDependency
import org.gradle.api.artifacts.ModuleDependency
import org.gradle.api.artifacts.ProjectDependency
import org.gradle.api.artifacts.dsl.DependencyHandler
import org.gradle.kotlin.dsl.exclude

// TODO: docs
fun ModuleDependency.exclude(projectDependency: ProjectDependency) {
  exclude(module = projectDependency.name)
}

/**
 * Gradle's analog for adding compile dependency.
 */
internal fun DependencyHandler.compileOnly(dependency: Any): Dependency =
  addDependency("compileOnly", dependency)

/**
 * Gradle's analog for adding api/transitive dependency.
 */
internal fun DependencyHandler.api(dependency: Any): Dependency = addDependency("api", dependency)

/**
 * Gradle's analog for adding implementation dependency.
 */
internal fun DependencyHandler.implementation(dependency: Any): Dependency =
  addDependency("implementation", dependency)

/**
 * Gradle's analog for adding unit test implementation dependency.
 */
internal fun DependencyHandler.testImplementation(dependency: Any): Dependency =
  addDependency("testImplementation", dependency)

/**
 * Gradle's analog for adding Detekt rules plugin.
 */
internal fun DependencyHandler.detektPlugin(dependency: Any): Dependency =
  addDependency("detektPlugins", dependency)

/**
 * Gradle's analog for adding implementation dependency in debug variant.
 */
internal fun DependencyHandler.debugImplementation(dependency: Any): Dependency =
  addDependency("debugImplementation", dependency)

internal fun DependencyHandler.addDependency(
  configurationName: String,
  dependency: Any,
): Dependency {
  return when (val dep = dependency.unwrappedProvider()) {
    is MinimalExternalModuleDependency -> requireNotNull(add(configurationName, dep.versionedAlias))
    is Project, is ProjectDependency -> requireNotNull(add(configurationName, dep))
    else -> error("Unsupported $configurationName dependency type ${dep::class.simpleName}: $dep.")
  }
}

/**
 * Would be nice to burn this and replace with type safe API generated by Gradle's version catalog
 * (not currently supported within Gradle plugins).
 */
private val MinimalExternalModuleDependency.versionedAlias: String
  get() = "${module.group}:${module.name}:${versionConstraint.requiredVersion}"
